/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GRAFICOS;

import MODELOS.Asteroide;
import MODELOS.Jugador;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import static java.time.Clock.system;
import java.util.ArrayList;

/**
 *
 * @author Administrador
 */
public class Interfaz extends javax.swing.JPanel implements Runnable{
    private boolean jugando;
    private Jugador yo;
    ArrayList<Asteroide> asteroidesMuebles;
    ArrayList<Asteroide> asteroidesInmuebles;
    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        this.jugando = false;
        this.asteroidesMuebles = new ArrayList<>();
        this.asteroidesInmuebles = new ArrayList<>();
    }
    
    @Override
    public void run(){
        long ti = System.currentTimeMillis();
        while(jugando==true){
            if(System.currentTimeMillis()-ti == 1000){
                crearAsteroidesMuebles();
                crearAsteroidesInmuebles();
                ti = System.currentTimeMillis();
            }
            if(System.currentTimeMillis()-ti == (1/60)*1000){
                
            }
        }
    }

    public boolean isJugando() {
        return jugando;
    }

    public void setJugando(boolean jugando) {
        this.jugando = jugando;
    }

    public Jugador getYo() {
        return yo;
    }

    public void setYo(Jugador yo) {
        this.yo = yo;
    }

    public ArrayList<Asteroide> getAsteroidesMuebles() {
        return asteroidesMuebles;
    }

    public void setAsteroidesMuebles(ArrayList<Asteroide> asteroidesMuebles) {
        this.asteroidesMuebles = asteroidesMuebles;
    }

    public ArrayList<Asteroide> getAsteroidesInmuebles() {
        return asteroidesInmuebles;
    }

    public void setAsteroidesInmuebles(ArrayList<Asteroide> asteroidesInmuebles) {
        this.asteroidesInmuebles = asteroidesInmuebles;
    }

    

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    //dibuja el borde de arriba del tablero
    public void dibujarBordeArriba(Graphics g){
        Toolkit t = Toolkit.getDefaultToolkit();
        Image imagen = t.getImage("src/IMAGENES/universo.jpg");
        for(int i = 0; i <= 675; i+=25){
            g.drawImage(imagen, i, 0, 25, 25, this);
        }
    }
    
    //dibuja el borde de abajo del tablero
    public void dibujarBordeAbajo(Graphics g){
        Toolkit t = Toolkit.getDefaultToolkit();
        Image imagen = t.getImage("src/IMAGENES/universo.jpg");
        for(int i = 0; i <= 675; i+=25){
            g.drawImage(imagen, i, 675, 25, 25, this);
        }  
    }
    
    //dibuja los bordes de los lados del tablero
    public void dibujarBordeLados(Graphics g){
        Toolkit t = Toolkit.getDefaultToolkit();
        Image imagen = t.getImage("src/IMAGENES/universo.jpg");
        for(int j = 0; j <= 675; j+=675){
            for(int i =25; i <= 675; i+=25){
                g.drawImage(imagen, j, i, 25, 25, this);
            }   
        }
    }
    
    @Override
    public void paintComponent(Graphics g){
        super.paintComponent(g);
        dibujarBordeLados(g);
        dibujarBordeAbajo(g);
        dibujarBordeArriba(g);
        dibujarJugador(g);
        for(int i = 0; i < asteroidesMuebles.size(); i++){
            dibujarAsteroides(g,asteroidesMuebles.get(i));
        }
        for(int i = 0; i < asteroidesInmuebles.size(); i++){
            dibujarAsteroides(g,asteroidesInmuebles.get(i));
        }
    }
    
    //va a mover todos los asteroides desde la direccion en que se crearon hasta la direccion contraria
    public void moverAsteroides(){
        for(int i = 0; i < this.asteroidesMuebles.size(); i++){
            this.asteroidesMuebles.get(i).mover();
        }
    }
    
    //da un numero aleatorio de 0 hasta el numero que llega como parametro
    private int numeroAleatorio(int num){
        int numero = 0;
        numero = (int) (Math.random() * num);
        return numero;
    }
    
    //crea asteroides de tamaño, orientacion y ubicacion aleatorias. Estos asteroides se van a mover hacia la direccion contraria en la que se creo
    private void crearAsteroidesMuebles(){
        int numero1 = numeroAleatorio(3);
        int numero2 = numeroAleatorio(660);
        int numero3 = numeroAleatorio(3);
        Asteroide asteroide;
        if (numero1 == 0){
            asteroide = new Asteroide(numero2, 0, darTamaño(numero3), "src/IMAGENES/asteroide.png", true, 0);
        } else if (numero1 == 1){
            asteroide = new Asteroide(700, numero2, darTamaño(numero3), "src/IMAGENES/asteroide.png", true, 1);
        } else if (numero1 == 2){
            asteroide = new Asteroide(numero2, 700, darTamaño(numero3), "src/IMAGENES/asteroide.png", true, 2);
        } else{
            asteroide = new Asteroide(0, numero2, darTamaño(numero3), "src/IMAGENES/asteroide.png", true, 3);
        }
        this.asteroidesMuebles.add(asteroide);
    }
    
    //da el tamaño a los asteroides dependiendo de un numero aleatorio que llega como parametro
    private int darTamaño(int num){
        if(num == 0){
            return 10;
        } else if (num == 1){
            return 20;
        } else if (num == 2){
            return 30;
        } else{
            return 40;
        }
    }
    
    //crea asteroides de posicion y tamaño aleatorio. Estos asteroides no se van a mover, permaneceran estaticos por unos cuantos segundos
    private void crearAsteroidesInmuebles(){
        int numero1 = numeroAleatorio(640);
        int numero2 = numeroAleatorio(640);
        int numero3 = numeroAleatorio(3);
        Asteroide asteroide = new Asteroide(numero1, numero2, darTamaño(numero3),"src/IMAGENES/asteroide.png", true, 4);
        this.asteroidesInmuebles.add(asteroide);
    }
    
    private void dibujarAsteroides(Graphics g, Asteroide asteroide){
        Toolkit t = Toolkit.getDefaultToolkit();
        Image imagen = t.getImage("src/IMAGENES/asteroide.png");
        g.drawImage(imagen, asteroide.getX(), asteroide.getY(), asteroide.getTamaño(), asteroide.getTamaño(), this);
    }
    
    private void dibujarJugador(Graphics g){
        Toolkit t = Toolkit.getDefaultToolkit();
        Image imagen = t.getImage("src/IMAGENES/nave.png");
        g.drawImage(imagen, this.yo.getX(), this.yo.getY(), this.yo.getTamaño(), this.yo.getTamaño(), this);
    }
}
